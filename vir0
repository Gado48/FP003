
#include <ESP32Servo.h>
#include <WiFi.h>
#include <WiFiClient.h>

WiFiServer server(80);

// Motor pins
const int leftFront = 25;
const int leftBack = 24;
const int rightFront = 23;
const int rightBack = 22;
const int enableLeft = 30;
const int enableRight = 21;

Servo gripper;
Servo lift;
int pos0 = 0;
int pos1 = 0;

// Encoder pins
const int encoderPinA = 34;
const int encoderPinB = 35;
volatile long encoder1Count = 0;
volatile long encoder2Count = 0;

long previousTime = 0;
float ePrevious = 0;
float eIntegral = 0;

float kp = 2.0;
float kd = 0.1;
float ki = 0.01;

void setup() {
  Serial.begin(115200);
  
  WiFi.begin("Deshret", "med7at003");
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi...");
  }
  server.begin();
  Serial.println("Connected to WiFi");

  pinMode(leftFront, OUTPUT);
  pinMode(leftBack, OUTPUT);
  pinMode(enableLeft, OUTPUT);
  pinMode(rightFront, OUTPUT);
  pinMode(rightBack, OUTPUT);
  pinMode(enableRight, OUTPUT);

  gripper.attach(32);
  lift.attach(33);

  pinMode(encoderPinA, INPUT);
  pinMode(encoderPinB, INPUT);

  attachInterrupt(digitalPinToInterrupt(encoderPinA), handleEncoder1, RISING);
  attachInterrupt(digitalPinToInterrupt(encoderPinB), handleEncoder2, RISING);
}

void loop() {
  int target = encoder1Count;
  float u = pidController(target, kp, kd, ki);

  WiFiClient client = server.available();
  if (client) {
    while (client.connected()) {
      if (client.available()) {
        char command = client.read();
        processWiFISocketCommand(command);
        if (command == 'Q') {
          sendRobotStatus(client);
        }
      }
    }
    client.stop();
  }
}

// Encoder interrupt handlers
void handleEncoder1() {
  encoder1Count++;
}

void handleEncoder2() {
  encoder2Count++;
}

// PID controller
float pidController(int target, float kp, float kd, float ki) {
  long currentTime = micros();
  float deltaT = ((float)(currentTime - previousTime)) / 1.0e6;

  int e = encoder2Count - target;                    //
  float eDerivative = (e - ePrevious) / deltaT;
  eIntegral = eIntegral + e * deltaT;

  float u = (kp * e) + (kd * eDerivative) + (ki * eIntegral);

  previousTime = currentTime;
  ePrevious = e;

  return u;
}

// Motor control functions
void moveMotor(int frontPin, int backPin, float u) {
  float speed = fabs(u);
  if (speed > 255) {
    speed = 255;
  }

  int direction = (u > 0) ? HIGH : LOW;

  digitalWrite(frontPin, direction);
  digitalWrite(backPin, !direction);
  analogWrite(enableLeft, speed);
}

// Robot motion control
void movingForward() {
  int target = encoder1Count;
  float u = pidController(target, kp, kd, ki);

  moveMotor(leftFront, leftBack, u);
  moveMotor(rightFront, rightBack, u);
}

void movingBackward() {
  int target = encoder1Count;
  float u = pidController(target, kp, kd, ki);

  moveMotor(leftFront, leftBack, -u);
  moveMotor(rightFront, rightBack, -u);
}

void movingLeft() {
  int target = encoder1Count;
  float u = pidController(target, kp, kd, ki);

  moveMotor(leftFront, leftBack, -u);
  moveMotor(rightFront, rightBack, u);
}

void movingRight() {
  int target = encoder1Count;
  float u = pidController(target, kp, kd, ki);

  moveMotor(leftFront, leftBack, u);
  moveMotor(rightFront, rightBack, -u);
}

void noMovement() {
  digitalWrite(leftFront, LOW);
  digitalWrite(leftBack, LOW);
  digitalWrite(rightFront, LOW);
  digitalWrite(rightBack, LOW);
}

// Process Wifi commands
void processWiFISocketCommand(char command) {
  switch (command) {
    case 'W':
      movingForward();
      break;
    case 'S':
      movingBackward();
      break;
    case 'D':
      movingRight();
      break;
    case 'A':
      movingLeft();
      break;
    case 'F':
      noMovement();
      break;

    case 'G':
      gripping();
      break;

     case 'R':
      releasing();
      break;

    case 'L':
      lifting();
      break;

    case 'P':
      putting();
      break;
  }
}

// Arm movement functions
void gripping() {
  pos0 = pos0 + 5;
  if (pos0 >= 180) {
    pos0 = 180;
  }
}

void releasing() {
  pos0 = pos0 - 5;
  if (pos0 <= 0) {
    pos0 = 0;
  }
}

void lifting() {
  pos1 = pos1 + 5;
  if (pos1 >= 180) {
    pos1 = 180;
  }
}

void putting() {
  pos0 = pos0 - 5;
  if (pos0 <= 0) {
    pos0 = 0;
  }
}

void sendRobotStatus(WiFiClient client)
{
  String response = "{";
  response += "\"encoder1Count\":" + String(float(encoder1Count)) + ",";       //
  response += "\"encoder2Count\":" + String(float(encoder2Count)) + ",";      //
  response += "}";
  client.println("HTTP/1.1 200 OK");
  client.println("Content-Type: application/json");
  client.println("Connection: close");
  client.println();
  client.println(response);
}
